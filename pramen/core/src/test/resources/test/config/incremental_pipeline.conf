# Copyright 2022 ABSA Group Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This variable is expected to be set up by the test suite
#base.path = "/tmp"

pramen {
  pipeline.name = "Incremental ingestion with a file-based source"

  bookkeeping.enabled = true
  stop.spark.session = false

  track.days = 2 # Previous day and today
}

pramen.metastore {
  tables = [
    {
      name = "table1"
      format = ${metastore.format}
      path = ${base.path}/table1
    },
    {
      name = "table2"
      format = ${metastore.format}
      path = ${base.path}/table2
    }
  ]
}

pramen.sources.1 = [
  {
    name = "spark_source"
    factory.class = "za.co.absa.pramen.core.source.SparkSource"

    has.information.date.column = ${has.information.date.column}
    information.date.column = "info_date"
    information.date.type = "date"
    information.date.format = "yyyy-MM-dd"

    offset.column {
      name = "id"
      type = "integral"
    }

    format = "csv"

    schema = ${csv.schema}

    option {
      header = true
      inferSchema = ${infer.schema}
    }
  }
]

pramen.operations = [
  {
    name = "Sourcing from a folder"
    type = "ingestion"
    schedule.type = "incremental"

    source = "spark_source"

    info.date.expr = "@runDate"

    tables = [
      {
        input.path = ${base.path}/landing
        output.metastore.table = table1
      }
    ]
  },
  {
    name = "Running a transformer"
    type = "transformation"
    disabled = ${transformer.disabled}

    class = "za.co.absa.pramen.core.transformers.IdentityTransformer"
    schedule.type = ${transformer.schedule}

    output.table = "table2"

    dependencies = [
      {
        tables = [ table1 ]
        date.from = "@infoDate"
      }
    ]

    option {
      input.table = "table1"
    }
  }
]
